package main

import "fmt"

type producto struct {
	nombre   string
	cantidad int
	precio   int
}
type listaProductos []producto

var lProductos listaProductos
var productosMinimaExistencia listaProductos

const existenciaMinima int = 10 //la existencia mínima es el número mínimo debajo de el cual se deben tomar eventuales desiciones

func (l *listaProductos) agregarProducto(nombre string, cantidad int, precio int) {
	// modificar el código para que cuando se agregue un producto, si este ya se encuentra, incrementar la cantidad
	// de elementos del producto y eventualmente el precio si es que es diferente
	nuevoProducto := l.buscarProducto(nombre) // Almacena el indice del producto o -1 en caso de que no exista
	if nuevoProducto == -1 {                  // Si no se encontro el producto se agrega como nuevo
		*l = append(*l, producto{nombre: nombre, cantidad: cantidad, precio: precio})
	} else {
		(*l)[nuevoProducto].cantidad += cantidad // Como ya exite se le suma la cantidad
		if (*l)[nuevoProducto].precio != precio {
			(*l)[nuevoProducto].precio = precio // Si el precio es diferente se asigna el nuevo precio
		}
	}
}

func (l *listaProductos) buscarProducto(nombre string) int { //el retorno es el índice del producto encontrado y -1 si no existe
	var result = -1
	var i int
	for i = 0; i < len(*l); i++ {
		if (*l)[i].nombre == nombre {
			result = i
		}
	}
	return result
}

func (l *listaProductos) venderProducto(nombre string, cant int) {
	var prod = l.buscarProducto(nombre)
	if prod != -1 {
		if cant <= (*l)[prod].cantidad {
			(*l)[prod].cantidad = (*l)[prod].cantidad - cant

			//modificar para que cuando no haya existencia de cantidad de productos, el producto se elimine de "la lista" y notificar
			if (*l)[prod].cantidad == 0 {
				(*l) = append((*l)[:prod], (*l)[prod+1:]...) // Se elimina el producto de la lista
				fmt.Printf("El producto %s se ha eliminado de la lista\n", nombre)
			}
		} else {
			fmt.Printf("La cantidad a comprar excede la cantidad disponible\n")
		}
	}
}

func (l *listaProductos) aumentarInventarioDeMinimos(productosMinimaExistencia listaProductos) {
	// Vamos a recorrer la lista donde se encuentran los productos con minima existencia
	for i := 0; i < len(productosMinimaExistencia); i++ {
		producto := productosMinimaExistencia[i]
		if producto.cantidad < existenciaMinima {
			faltante := existenciaMinima - producto.cantidad // Se rellena con el faltante para alcanzar el minimo
			l.agregarProducto(producto.nombre, faltante, producto.precio)
		}
	}
}

func llenarDatos() {
	lProductos.agregarProducto("arroz", 15, 2500)
	lProductos.agregarProducto("frijoles", 4, 2000)
	lProductos.agregarProducto("leche", 8, 1200)
	lProductos.agregarProducto("café", 12, 4500)
}

func (l *listaProductos) listarProductosMínimos() listaProductos {
	// debe retornar una nueva lista con productos con existencia mínima
	var productosMinimaExistencia listaProductos
	for _, producto := range *l {
		if producto.cantidad < existenciaMinima {
			productosMinimaExistencia = append(productosMinimaExistencia, producto)
		}
	}
	return productosMinimaExistencia
}

func main() {
	llenarDatos()
	fmt.Println(lProductos)
	lProductos.venderProducto("arroz", 4)
	lProductos.listarProductosMínimos()
	lProductos.aumentarInventarioDeMinimos(productosMinimaExistencia)
	lProductos.agregarProducto("arroz", 15, 2500)
}
